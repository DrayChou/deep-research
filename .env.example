# Deep Research 统一环境变量配置模板
# 复制此文件为 .env 并根据您的实际环境修改相应配置

# ================================
# 数据库配置 (Database Configuration)
# ================================

# 数据库类型选择 (auto: 自动检测, postgresql: 强制PostgreSQL, sqlite: 强制SQLite)
DATABASE_TYPE=postgresql

# PostgreSQL 基础连接配置
POSTGRES_HOST=pgvector
POSTGRES_PORT=5432
POSTGRES_DB=cspc_dev
POSTGRES_USER=pgvector
POSTGRES_PASSWORD=pgvector
POSTGRES_SSL=false

# 通用数据库URL (向后兼容)
DATABASE_URL=postgresql://pgvector:pgvector@pgvector:5432/cspc_dev

# 针对不同客户环境的数据库URL配置 (可选，如果设置将覆盖上面的基础配置)
# DATABASE_URL_LOCAL=postgresql://pgvector:pgvector@localhost:45432/cspc_dev
# DATABASE_URL_DEV=postgresql://pgvector:pgvector@pgvector:5432/cspc_dev
# DATABASE_URL_PROD=postgresql://pgvector:pgvector@pgvector:5432/cspc_dev

# 本地客户是否使用PostgreSQL而不是SQLite
USE_POSTGRES_FOR_LOCAL=true

# 强制使用PostgreSQL (即使配置检查失败)
FORCE_POSTGRESQL=true

# 数据库连接池配置
DB_POOL_SIZE=50
DB_MAX_OVERFLOW=50
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=1800

# ================================
# 数据库启动初始化配置
# ================================

# SQLite数据库路径 (用于数据迁移)
SQLITE_DB_PATH=./data/tasks.db
SQLITE_STORAGE_DIR=./data

# 启动初始化选项
DB_AUTO_INITIALIZE=true
DB_MIGRATION_ENABLED=true
DB_INIT_MAX_RETRIES=3
DB_INIT_RETRY_DELAY=5000

# ================================
# Redis配置 (用于缓存和会话)
# ================================

REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=1
REDIS_URL=redis://redis:6379/1

# ================================
# 系统运行环境
# ================================

# 运行时环境标识
RUNNING_IN_DOCKER=true
NODE_ENV=production

# 访问控制
ACCESS_PASSWORD=your_access_password_here

# 基础路径配置 (用于代理部署)
NEXT_PUBLIC_BASE_PATH=/dp2api

# ================================
# 通知系统全局配置
# ================================

# 通知系统总开关
NOTIFICATION_ENABLED=true

# 启用的通知渠道 (可选择多个，用逗号分隔)
# 可选值: wechat-work, feishu, telegram, bark, pushdeer, email, webhook
NOTIFICATION_CHANNELS=feishu,bark,telegram

# 全局重试次数和去重配置
NOTIFICATION_RETRY_ATTEMPTS=3
NOTIFICATION_DEDUP_ENABLED=true
NOTIFICATION_DEDUP_WINDOW=30

# ================================
# 企业微信通知配置
# ================================

# 企业微信群机器人 Webhook 地址
# 从企业微信群聊 -> 群设置 -> 群机器人 -> 添加机器人 中获取
WECHAT_WORK_WEBHOOK=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=YOUR_KEY
WECHAT_WORK_RETRY_ATTEMPTS=3

# ================================
# 飞书通知配置
# ================================

# 飞书群机器人 Webhook 地址
# 从飞书群聊 -> 设置 -> 机器人 -> 添加机器人 -> 自定义机器人 中获取
FEISHU_WEBHOOK=https://open.feishu.cn/open-apis/bot/v2/hook/YOUR_HOOK_ID_HERE
FEISHU_RETRY_ATTEMPTS=3

# ================================
# Telegram Bot 配置
# ================================

# Telegram Bot Token (从 @BotFather 获取)
TELEGRAM_BOT_TOKEN=1234567890:AABBCCDDEEFFgghhiijjkkllmmnnooppqqrr

# Telegram Chat ID (个人ID或群组ID)
# 个人ID: 数字格式，如 123456789
# 群组ID: 负数格式，如 -1001234567890
TELEGRAM_CHAT_ID=-1001234567890
TELEGRAM_RETRY_ATTEMPTS=3

# ================================
# Bark iOS 推送配置
# ================================

# Bark 服务器地址 (可选，支持自建服务器)
BARK_SERVER=https://api.day.app

# Bark 设备密钥 (从 Bark App 中获取)
BARK_DEVICE_KEY=YOUR_DEVICE_KEY_HERE
BARK_RETRY_ATTEMPTS=3

# ================================
# PushDeer 跨平台推送配置
# ================================

# PushDeer 服务器地址 (可选，支持自建服务器)
PUSHDEER_SERVER=https://api2.pushdeer.com

# PushDeer 推送密钥
PUSHDEER_PUSH_KEY=YOUR_PUSH_KEY
PUSHDEER_RETRY_ATTEMPTS=3

# ================================
# 邮件 SMTP 配置
# ================================

# SMTP 服务器配置
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password

# 邮件发送者和接收者
EMAIL_FROM=Deep Research <your-email@gmail.com>
EMAIL_TO=admin@example.com,ops@example.com
EMAIL_RETRY_ATTEMPTS=3

# ================================
# 通用 Webhook 配置
# ================================

# Webhook 目标地址
WEBHOOK_URL=https://your-webhook-endpoint.com/notify

# HTTP 方法 (可选，默认 POST)
WEBHOOK_METHOD=POST

# 自定义请求头 (可选，JSON 格式)
WEBHOOK_HEADERS={"Authorization":"Bearer YOUR_TOKEN","X-Custom-Header":"value"}
WEBHOOK_RETRY_ATTEMPTS=3

# ================================
# AI 服务提供商配置
# ================================

# Google Gemini
GOOGLE_API_KEY=your_google_api_key_here
GOOGLE_CLOUD_PROJECT_ID=your_project_id

# OpenAI
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_BASE_URL=https://api.openai.com/v1

# Anthropic Claude
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# DeepSeek
DEEPSEEK_API_KEY=your_deepseek_api_key_here

# XAI Grok
XAI_API_KEY=your_xai_api_key_here

# Mistral
MISTRAL_API_KEY=your_mistral_api_key_here

# Azure OpenAI
AZURE_OPENAI_API_KEY=your_azure_openai_key
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com
AZURE_OPENAI_DEPLOYMENT_NAME=your_deployment_name

# OpenRouter
OPENROUTER_API_KEY=your_openrouter_api_key_here

# Ollama (本地模型)
OLLAMA_BASE_URL=http://localhost:11434

# ================================
# 搜索服务配置
# ================================

# Tavily Search
TAVILY_API_KEY=your_tavily_api_key_here

# Firecrawl
FIRECRAWL_API_KEY=your_firecrawl_api_key_here

# Exa Search
EXA_API_KEY=your_exa_api_key_here

# Bocha Search  
BOCHA_API_KEY=your_bocha_api_key_here

# SearXNG (自建搜索引擎)
SEARXNG_BASE_URL=https://your-searxng-instance.com

# ================================
# MCP (Model Context Protocol) 配置
# ================================

# MCP 服务器端点
MCP_SERVER_URL=http://localhost:3002
MCP_SERVER_ENABLED=true

# MCP 传输类型 (sse 或 http)
MCP_TRANSPORT_TYPE=sse

# ================================
# 性能和安全配置
# ================================

# 请求限制和超时
REQUEST_TIMEOUT=300000
MAX_CONCURRENT_REQUESTS=10
RATE_LIMIT_REQUESTS_PER_MINUTE=60

# 文件上传限制
MAX_FILE_SIZE=50MB
ALLOWED_FILE_TYPES=pdf,doc,docx,txt,md,csv,json

# JWT 配置
JWT_SECRET=your_jwt_secret_key_here
JWT_EXPIRES_IN=7d

# CORS 配置
CORS_ORIGIN=*
CORS_CREDENTIALS=true

# ================================
# 日志和监控配置
# ================================

# 日志级别 (debug, info, warn, error)
LOG_LEVEL=info

# 性能监控
ENABLE_PERFORMANCE_MONITORING=true
HEALTH_CHECK_INTERVAL=30000

# 错误追踪
SENTRY_DSN=your_sentry_dsn_here
ENABLE_ERROR_TRACKING=true

# ================================
# 构建和部署配置
# ================================

# 构建模式 (standard, export, standalone)
NEXT_PUBLIC_BUILD_MODE=standard

# 静态导出配置
NEXT_PUBLIC_EXPORT_MODE=false

# CDN 配置
NEXT_PUBLIC_CDN_URL=https://your-cdn-domain.com

# ================================
# 开发调试配置
# ================================

# 开发模式设置
DEBUG=false
VERBOSE_LOGGING=false

# 开发工具
ENABLE_REACT_DEVTOOLS=false
ENABLE_REDUX_DEVTOOLS=false

# 热重载配置
FAST_REFRESH=true

# ================================
# 使用说明和示例
# ================================

# 1. 数据库配置说明：
#    - 首次启动时，系统会自动检测并初始化PostgreSQL数据库
#    - 如果检测到SQLite数据文件，会自动执行数据迁移
#    - 支持多环境客户端连接，根据请求来源自动识别环境

# 2. 通知系统说明：
#    - 支持多渠道通知，可根据需要启用相应渠道
#    - 所有渠道都支持 4 个级别：info, warning, error, critical
#    - 每个渠道都有特定的格式和功能，详见各渠道配置说明

# 3. 安全注意事项：
#    - 请妥善保管所有API密钥和敏感配置
#    - 生产环境建议启用SSL和访问控制
#    - 定期更新和轮换API密钥

# 4. 性能优化建议：
#    - 根据负载调整数据库连接池大小
#    - 合理配置Redis缓存
#    - 监控API调用频率，避免超出限制

# ================================
# 快速测试命令
# ================================

# 测试数据库连接：
# curl http://localhost:3001/api/init-status

# 测试通知系统：
# node -e "
# const { NotificationService } = require('./src/utils/notification');
# const { notificationConfig } = require('./src/utils/notification/config');
# const service = new NotificationService(notificationConfig);
# service.testAllChannels().then(console.log);
# "

# 检查系统健康状况：
# curl http://localhost:3001/api/health

# ================================
# 故障排除
# ================================

# 如果遇到问题，请检查：
# 1. 所有必需的环境变量是否已正确设置
# 2. 数据库服务是否正常运行
# 3. 网络连接是否正常
# 4. API密钥是否有效且有足够配额
# 5. 查看应用日志获取详细错误信息